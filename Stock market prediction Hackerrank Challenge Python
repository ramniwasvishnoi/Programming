import math
import os
import random
import re
import sys
import pdb

#
# Complete the 'predictAnswer' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts following parameters:
#  1. INTEGER_ARRAY stockData
#  2. INTEGER_ARRAY queries
#

def predictAnswer(stockData, queries):
   pev_smaller_r=[0]*len(stockData)
   prev_smaller=[0]*len(stockData)
   next_smaller=[0]*len(stockData)
   s1=[]
   s2=[]
   result=[]
   # calculate next samller for each element using stack in O(n)
   for i,j in enumerate(stockData):
       if i==0:
           s1.append(i)
       else:
           while len(s1)>0 and j<stockData[s1[-1]]:
               next_smaller[s1[-1]]=i
               s1.pop()
           s1.append(i)
   while len(s1)>0:
       next_smaller[s1[-1]]=-1
       s1.pop()
   pdb.set_trace()
   s_data_r=stockData[::-1]
   for i,j in enumerate(s_data_r):
       if i==0:
           s2.append(i)
       else:
           while len(s2)>0 and j<s_data_r[s2[-1]]:
               pev_smaller_r[s2[-1]]=len(stockData)-1-i
               s2.pop()
           s2.append(i)
   while len(s2)>0:
       pev_smaller_r[s2[-1]]=-1
       s2.pop()        
   pdb.set_trace()
   prev_smaller=pev_smaller_r[::-1]
   pdb.set_trace()
   for i in queries:
       i-=1;
       if (prev_smaller[i]==-1) and (next_smaller[i]==-1):
           result.append(-1)
       elif (prev_smaller[i]==-1):
           result.append(next_smaller[i]+1)
       elif (next_smaller[i]==-1):
           result.append(prev_smaller[i]+1)
       else:
           if (i-prev_smaller[i])<(next_smaller[i]-i):
               result.append(prev_smaller[i]+1)
           elif (i-prev_smaller[i])>(next_smaller[i]-i):
               result.append(next_smaller[i]+1)
           else:
               result.append(prev_smaller[i]+1)
   return result

if __name__ == '__main__':
   #fptr = open(os.environ['OUTPUT_PATH'], 'w')

   stockData_count = int(input().strip())

   stockData = []

   for _ in range(stockData_count):
       stockData_item = int(input().strip())
       stockData.append(stockData_item)

   queries_count = int(input().strip())

   queries = []

   for _ in range(queries_count):
       queries_item = int(input().strip())
       queries.append(queries_item)
   pdb.set_trace()
   result = predictAnswer(stockData, queries)

#     fptr.write('\n'.join(map(str, result)))
#     fptr.write('\n')

#     fptr.close()
