#!/bin/python3

import math
import os
import random
import re
import sys
import pdb
import heapq

# Complete the 'countMeetings' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER_ARRAY firstDay
#  2. INTEGER_ARRAY lastDay
#

def countMeetings(firstDay, lastDay):
    events=[[firstDay[i],lastDay[i]] for i in range(len(firstDay))]
    events.sort(key = lambda x: x[0])
    heap = []
    res = 0
    max_days = max(e[1] for e in events)
    day = events[0][0]
    i = 0
    while day <= max_days:
        while i < len(events) and events[i][0] == day:
            heapq.heappush(heap, events[i][1])
            i+=1
        while heap and heap[0] < day:
            heapq.heappop(heap)
        if heap:
            heapq.heappop(heap)
            res += 1
        day += 1
    return res

if __name__ == '__main__':
    #fptr = open(os.environ['OUTPUT_PATH'], 'w')

    firstDay_count = int(input().strip())

    firstDay = []

    for _ in range(firstDay_count):
        firstDay_item = int(input().strip())
        firstDay.append(firstDay_item)

    lastDay_count = int(input().strip())

    lastDay = []

    for _ in range(lastDay_count):
        lastDay_item = int(input().strip())
        lastDay.append(lastDay_item)

    result = countMeetings(firstDay, lastDay)
    #pdb.set_trace()
    fptr.write(str(result) + '\n')

    #fptr.close()
